13. strStr (Leetcode 28)

For a given source string and a target string, you should output the first index(from 0) of target string 
in source string.

If target does not exist in source, just return -1.

Clarification
Do I need to implement KMP Algorithm in a real interview?

Not necessary. When you meet this problem in a real interview, the interviewer may just want to test your 
basic implementation ability. But make sure you confirm with the interviewer first.

Example
If source = "source" and target = "target", return -1.

If source = "abcdabcdefg" and target = "bcd", return 1.


class Solution:
    """
    @param: source: source string to be scanned.
    @param: target: target string containing the sequence of characters to match
    @return: a index to the first occurrence of target in source, or -1  if target is not part of source.
    """
    def strStr(self, source, target):
        # write your code here
        if source == None or target == None:
            return -1
        if len(source) < len(target):
            return -1
        if len(target) == 0:
            return 0
        for i in range(len(source)-len(target) + 1):
            for j in range(len(target)):
                if source[i+j] != target[j]:
                    break
                if j == len(target) - 1:
                    return i
        return -1

O(m*n)





Rabin-Karp法（九章推荐）：
def strStr2(self, source, target):
    if target==None or source==None or len(target)>len(source):
        return -1
    tVal = sVal = 0
    MAXINT = sys.maxint
    HIGHNUM = 1
    m = len(target)
    for i in range(m):
        tVal = (tVal*26+ord(target[i])-ord('a')) % MAXINT
        sVal = (sVal*26+ord(source[i])-ord('a')) % MAXINT
        HIGHNUM = HIGHNUM*26 % MAXINT
    if tVal == sVal and target == source[:m]:
        return 0
    for i, c in enumerate(source[m:]):
        sVal = (sVal*26+ (ord(c)-ord('a')) - \
            (ord(source[i]) -ord('a'))*HIGHNUM) % MAXINT
        if tVal == sVal and target == source[i+1: i+m+1]:
            return i+1
    return -1
