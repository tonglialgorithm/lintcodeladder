453. Flatten Binary Tree to Linked List

**遍历法：

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: a TreeNode, the root of the binary tree
    @return: nothing
    """
    def __init__(self):  
        self.lastNode = None
        
    def flatten(self, root):
        # write your code here
        if not root:
            return 
        
        if self.lastNode:
            self.lastNode.left = None
            self.lastNode.right = root
        
        self.lastNode = root
        
        right = root.right   # 需要这一步，因为如果没有的话，在执行下一行的过程中root将会被改变，则root.right也会跟着改变
        self.flatten(root.left)
        self.flatten(right)


**分治法：思路可能更清晰一些
左右分别flatten然后左的最后连到右边
然后这一串赋予根节点的右边
把根节点的左变为空
class Solution:
    """
    @param root: a TreeNode, the root of the binary tree
    @return: nothing
    """
    def flatten(self, root):
        # write your code here
        if not root:
            return 
        
        leftlast = self.flatten(root.left)
        rightlast = self.flatten(root.right)

        # 把左边和右边连接起来
        if leftlast:
            leftlast.right = root.right
            root.right = root.left  # 把左边的东西全部移到右边去
            root.left = None  # 把左边变成空
        
        if rightlast:
            return rightlast
        
        if leftlast:
            return leftlast
        
        return root
