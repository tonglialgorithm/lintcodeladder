426. Restore IP Addresses
Given a string containing only digits, restore it by returning all possible valid IP address combinations.

Example
Given "25525511135", return

[
  "255.255.11.135",
  "255.255.111.35"
]
Order does not matter.

IP地址由32位二进制数组成，为便于使用，常以XXX.XXX.XXX.XXX形式表现，每组XXX代表小于或等于255的10进制数。
所以说IP地址总共有四段，每一段可能有一位，两位或者三位，范围是[0, 255]，题目明确指出输入字符串只含有数字，
所以当某段是三位时，我们要判断其是否越界（>255)，还有一点很重要的是，当只有一位时，0可以成某一段，如果有两
位或三位时，像 00， 01， 001， 011， 000等都是不合法的。这道题其实也可以看做是字符串的分段问题，在输入字符
串中加入三个点，将字符串分为四段，每一段必须合法，求所有可能的情况。



class Solution:
    """
    @param s: the IP string
    @return: All possible valid IP addresses
    """
    def restoreIpAddresses(self, s):
        # write your code here
        res = []
        self.dfs(s, res, 0, [])
        return res
    
    def dfs(self, s, res, startInd, subset):
        if len(subset) == 4 and startInd == len(s):
            res.append('.'.join(subset))
            return
        
        for i in range(startInd, startInd + 3):
            if i >= len(s):
                return
            substring = s[startInd : i + 1]
            num = int(substring)
            if num < 0 or num > 255 or len(substring) != len(str(num)):
                continue
            subset.append(substring)
            self.dfs(s, res, i+1, subset)
            subset.pop()
