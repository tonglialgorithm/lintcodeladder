104. Merge K Sorted Lists 
Merge k sorted linked lists and return it as one sorted list.
Analyze and describe its complexity.
Example
Given lists:
[
  2->4->null,
  null,
  -1->null
],
return -1->2->4->null.



"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if len(lists) < 1:
            return None
        
        from heapq import heappop, heappush
        
        heap = []
        dummy = tail = ListNode(0)
        
        for node in lists:
            if node:
                heappush(heap, (node.val, node))
        
        while heap:
            node = heappop(heap)[1]
            tail.next = node
            tail = tail.next
            if node.next:
                heappush(heap, (node.next.val, node.next))
        
        return dummy.next
