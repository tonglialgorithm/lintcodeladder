246. Binary Tree Path Sum II
Description
Your are given a binary tree in which each node contains a value. Design an algorithm to get all paths which 
sum to a given value. The path does not need to start or end at the root or a leaf, but it must go in a straight line down.

Example
Given a binary tree:

    1
   / \
  2   3
 /   /
4   2
for target = 6, return

[
  [2, 4],
  [1, 3, 2]
]

此题和376的区别在于不需要从root出发
可以用和上题一样的方式找path，找到之后将path从后向前找subsum，如果找到subsum = target，则把该path从这个position之后的都放入res

最坏的情况，时间复杂度O(N^2)


"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: root: the root of binary tree
    @param: target: An integer
    @return: all valid paths
    """
    def binaryTreePathSum2(self, root, target):
        # write your code here
        res = []
        path = []
        if not root:
            return []
        self.helper(root, path, res, target)
        return res
    
    def helper(self, root, path, res, target):
        if not root:
            return 
        path.append(root.val)
        
        tmp = target
        for i in range(len(path) - 1, -1, -1):
            tmp -= path[i]
            if tmp == 0:
                res.append(path[i:])
        
        self.helper(root.left, path, res, target)
        self.helper(root.right, path, res, target)
        
        path.pop()
