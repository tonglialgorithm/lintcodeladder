829. Word Pattern II
Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty 
substring in str.(i.e if a corresponds to s, then b cannot correspond to s. For example, given pattern = "ab", 
str = "ss", return false.)

Example
Given pattern = "abab", str = "redblueredblue", return true.
Given pattern = "aaaa", str = "asdasdasdasd", return true.
Given pattern = "aabb", str = "xyzabcxzyabc", return false.



class Solution:
    """
    @param pattern: a string,denote pattern string
    @param str: a string, denote matching string
    @return: a boolean
    """
    def wordPatternMatch(self, pattern, string):
        # write your code here
        if not pattern and not string:
            return True
        if not pattern or not string:
            return False
        map = {}
        wordset = set()
        return self.match(pattern, string, map, wordset)
    
    def match(self, pattern, string, map, wordset):
        if len(pattern) == 0:
            return len(string) == 0
        
        pChar = pattern[0]

        // 如果pattern当前字符在map中，检查string是否startswith对应的value，向下递归
        if pChar in map:
            if string.startswith(map[pChar]) == False:
                return False
            substart = len(map[pChar])
            return self.match(pattern[1:], string[substart:], map, wordset)
        
        // 如果pattern当前字符不在map中，则从string的当前位置开始向后试word，如果是一个已经存在过的word则继续向后扩张一位，直到找到没有存在过的word，
        // 再向下递归
        for i in range(len(string)):
            word = string[:i+1]
            if word in wordset:
                continue
            map[pChar] = word
            wordset.add(word)
            if self.match(pattern[1:], string[i + 1: ], map, wordset):
                return True
            wordset.remove(word)  // 这两行是对wordset和map执行递归前后的镜像操作
            del map[pChar]
        
        return False
            
