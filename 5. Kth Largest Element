quick select 快速选择（快排之中的一个步骤）

5. Kth Largest Element

可以先排序再数，但是耗费时间多

用quick sort: 可以去掉一半

class Solution:
    # @param k & A a integer and an array
    # @return ans a integer
    def kthLargestElement(self, k, A):
        if not A:
            return None
            
        return self.quickSelect(A, 0, len(A) - 1, k) # 第一次没写return，不通过，只返回null
    
    def quickSelect(self, A, start, end, k):
        if start == end:
            return A[start]
        
        left = start
        right = end
        pivot = A[(start + end) / 2]
        while left <= right:
            while left <= right and A[left] > pivot:
                left += 1
            while left <= right and A[right] < pivot:
                right -= 1
            if left <= right:
                A[left], A[right] = A[right], A[left]
                left += 1
                right -= 1                       # 前面这一堆都是快排，模板要背下来
        
        if start + k - 1 <= right:              # 这里及以下都是看去掉哪一半，然后在有k的一半中继续递归快排
            return self.quickSelect(A, start, right, k)
        if start + k - 1 >= left:
            return self.quickSelect(A, left, end, k - (left - start))
        return A[right + 1]
