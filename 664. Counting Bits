664. Counting Bits
Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate 
the number of 1's in their binary representation and return them as an array.

Example
Given num = 5 you should return [0,1,1,2,1,2].

Challenge
It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do 
it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount 
in c++ or in any other language.

位运算 右移一位
class Solution:
    """
    @param num: a non negative integer number
    @return: an array represent the number of 1's in their binary
    """
    def countBits(self, num):
        # write your code here
        f = [0 for i in range(num + 1)]
        f[0] = 0
        
        for i in range(1, num + 1):
            f[i] = f[i >> 1] + i % 2
        
        return f

