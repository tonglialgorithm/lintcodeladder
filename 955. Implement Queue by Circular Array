955. Implement Queue by Circular Array
Implement queue by circulant array. You need to support the following methods:

CircularQueue(n): initialize a circular array with size n to store elements
boolean isFull(): return true if the array is full
boolean isEmpty(): return true if there is no element in the array
void enqueue(element): add an element to the queue
int dequeue(): pop an element from the queue
Example
CircularQueue(5)
isFull()   => false
isEmpty() => true
enqueue(1)
dequeue()  => 1

如何实现队列
我们需要知道队列的入队操作是只在队尾进行的，相对的出队操作是只在队头进行的，所以需要两个变量front与rear分别来指向队头与队尾
由于是循环队列，我们在增加元素时，如果此时 rear = array.length - 1 ，rear 需要更新为 0；同理，在元素出队时，如果 
front = array.length - 1, front 需要更新为 0. 对此，我们可以通过对数组容量取模来更新。

不难，需要熟练
class CircularQueue:
    def __init__(self, n):
        # do intialization if necessary
        self.arr = [0] * n
        self.capacity = n
        self.size = 0
        self.front = 0
        self.rear = 0
    """
    @return:  return true if the array is full
    """
    def isFull(self):
        # write your code here
        return self.size == self.capacity

    """
    @return: return true if there is no element in the array
    """
    def isEmpty(self):
        # write your code here
        return self.size == 0

    """
    @param element: the element given to be added
    @return: nothing
    """
    def enqueue(self, element):
        # write your code here
        if self.isFull():
            raise Exception('The circular array is full.')
        self.arr[self.rear] = element
        self.rear = (self.rear + 1) % self.capacity
        self.size += 1
        
        
    """
    @return: pop an element from the queue
    """
    def dequeue(self):
        # write your code here
        if self.isEmpty():
            raise Exception('Popping from an empty circular buffer.')
        item = self.arr[self.front]
        self.front = (self.front + 1) % self.capacity
        self.size -= 1
        return item
