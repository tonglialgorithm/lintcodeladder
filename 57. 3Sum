57. 3Sum 

最优时间复杂度：O（n^2)

转化成twoSum的问题

class Solution:
    """
    @param numbers: Give an array numbers of n integer
    @return: Find all unique triplets in the array which gives the sum of zero.
    """
    def threeSum(self, numbers):
        # write your code here
        if len(numbers) < 3:
            return []
        
        numbers.sort()
        n = len(numbers)
        res = []
        
        for i in xrange(0, n - 2):
            if i > 0 and numbers[i - 1] == numbers[i]:
                continue
            left = i + 1
            right = n - 1
            target = 0 - numbers[i]
            
            self.twoSum(numbers, left, right, target, res)
        return res
    
    def twoSum(self, numbers, left, right, target, res):
        while left < right:
            if numbers[left] + numbers[right] == target:
                res.append((0 - target, numbers[left], numbers[right]))
                left += 1
                right -= 1
                while left < right and numbers[left] == numbers[left - 1]:
                    left += 1
                while left < right and numbers[right] == numbers[right + 1]:
                    right -= 1
            elif numbers[left] + numbers[right] < target:
                left += 1
            else:
                right -= 1
        
