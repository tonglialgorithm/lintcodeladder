689. Two Sum IV - Input is a BST
Given a binary search tree and a number n, find two numbers in the tree that sums up to n.

Example
Given a binary search tree:

    4
   / \
  2   5
 / \
1   3
and a number n = 3
return [1, 2] or [2, 1]

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param: : the root of tree
    @param: : the target sum
    @return: two numbers from tree which sum is n
    """

    def twoSum(self, root, n):
        # write your code here
        if not root or (not root.left and not root.right):
            return None
        self.res = []
        l, r = root, root
        self.find(l, r, n)
        return self.res
        
    def find(self, l, r, n):
        while l and r:
            if l.val + r.val == n and l.val != r.val:
                self.res = [l.val, r.val]
                return self.res
            if l.val + r.val < n:
                return self.find(l.right, r, n) or self.find(l, r.right, n)
            else:
                return self.find(l.left, r, n) or self.find(l, r.left, n)
