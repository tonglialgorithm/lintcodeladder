前序遍历： 根左右
66. Binary Tree Preorder Traversal

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: Preorder in ArrayList which contains node values.
    """
    def preorderTraversal(self, root):
        # write your code here
        self.res = []                     
        self.traverse(root)
        return self.res
    
    def traverse(self, root):
        if not root:
            return 
        self.res.append(root.val)
        self.traverse(root.left)
        self.traverse(root.right)
        
----------------------------------------------------------------
    
非递归版的preorder
遍历顺序为根、左、右

如果根节点非空，将根节点加入到栈中。
如果栈不空，弹出出栈顶节点，将其值加加入到数组中。
如果该节点的右子树不为空，将右子节点加入栈中。
如果左子节点不为空，将左子节点加入栈中。
重复第二步，直到栈空。

class Solution:
    """
    @param root: A Tree
    @return: Preorder in ArrayList which contains node values.
    """
    def preorderTraversal(self, root):
        # write your code here
        stack = []
        preorder = []
        if not root:
            return preorder
    
        stack.append(root)
        while stack:
            node = stack.pop()
            preorder.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        
        return preorder
