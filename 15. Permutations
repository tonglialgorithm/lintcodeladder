15. Permutations
Given a list of numbers, return all possible permutations.

Example
For nums = [1,2,3], the permutations are:

[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


使用一个记忆化数组visited，记录哪些元素被访问过了
详解：https://www.jiuzhang.com/tutorial/algorithm/440

import copy
class Solution:
    """
    @param: nums: A list of integers.
    @return: A list of permutations.
    """
    def permute(self, nums):
        # write your code here
        res = []
        if nums == None:
            return res
        visited = [False for i in range(len(nums))]
        self.dfs(nums, visited, [], res)
        return res
    
    def dfs(self, nums, visited, permutation, res):
        // 递归的出口
        if len(permutation) == len(nums):
            res.append(copy.deepcopy(permutation))
            return
        
        // 递归的拆解    
        for i in range(0, len(nums)):
            if visited[i]:
                continue

            // [] -> [1]
            permutation.append(nums[i])     // 注意这五行的“镜像”操作
            visited[i] = True
            self.dfs(nums, visited, permutation, res)
            // [1] -> []
            visited[i] = False
            permutation.pop()
