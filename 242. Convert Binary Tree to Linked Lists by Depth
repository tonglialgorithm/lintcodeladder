242. Convert Binary Tree to Linked Lists by Depth
Given a binary tree, design an algorithm which creates a linked list of all the nodes at each depth (e.g., if you have a tree with depth D, you'll have D linked lists).

Example
Given binary tree:

    1
   / \
  2   3
 /
4
return

[
  1->null,
  2->3->null,
  4->null
]


"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
"""
class Solution:
    # @param {TreeNode} root the root of binary tree
    # @return {ListNode[]} a lists of linked list
    def binaryTreeToLists(self, root):
        # Write your code here
        if not root:
            return []
        res = []
        import Queue
        q = Queue.Queue()
        q.put(root)
        while not q.empty():
            size = q.qsize()
            dummy = p = ListNode(0)
            for i in range(size):
                node = q.get()
                p.next = ListNode(node.val)
                p = p.next
                
                if node.left:
                    q.put(node.left)
                if node.right:
                    q.put(node.right)
            res.append(dummy.next)
        return res
