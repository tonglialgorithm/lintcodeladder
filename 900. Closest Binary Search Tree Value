900. Closest Binary Search Tree Value

Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Example
Given root = {1}, target = 4.428571, return 1.

如果使用中序遍历，最坏的时间复杂度为O(n)

在面试时候，不让用中序遍历完成，使用lowerbound和upperbound的方法时间复杂度O(h)：

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the given BST
    @param target: the given target
    @return: the value in the BST that is closest to the target
    """
    def closestValue(self, root, target):
        # write your code here
        if not root:
            return None
        uppernode = self.upperbound(root, target)
        lowernode = self.lowerbound(root, target)
        
        if not lowernode:
            return uppernode.val
        if not uppernode:
            return lowernode.val
            
        if target - lowernode.val > uppernode.val - target:
            return uppernode.val
        
        return lowernode.val
    
    def upperbound(self, root, target):
        upper = None
        while root:
            if target > root.val:
                root = root.right
            else:
                upper = root
                root = root.left
        return upper
            
    def lowerbound(self, root, target):
        lower = None
        while root:
            if target < root.val:
                root = root.left
            else:
                lower = root
                root = root.right
        return lower
                 
