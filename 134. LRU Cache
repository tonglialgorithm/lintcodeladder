134. LRU Cache
Design and implement a data structure for Least Recently Used (LRU) cache. It 
should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists 
in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When 
the cache reached its capacity, it should invalidate the least recently used item 
before inserting a new item.

具体说明见视频

用linkedlist实现 + hashmap

key是值，value是在linkedlist中的node

如何知道前一个node：
1.doubly linkedlist
2.单向链表，不存当前node，直接存前一个node


这个是doubly linked list 的写法

可以优化的地方：node 的remove 和 move to tail可以单独写成函数，避免重复代码
class Node:
    def __init__(self, key = None, value = None):
        self.key = key
        self.val = value
        self.prev = None
        self.next = None

class LRUCache:
    """
    @param: capacity: An integer
    """
    def __init__(self, capacity):
        # do intialization if necessary
        self.capacity = capacity
        self.hash = {}
        self.head = Node(0, 0)
        self.tail = Node(0, 0)
        self.head.next = self.tail
        self.tail.prev = self.head

    """
    @param: key: An integer
    @return: An integer
    """
    def get(self, key):
        # write your code here
        if key not in self.hash:
            return -1
        node = self.hash[key]
        # delete node
        node.prev.next = node.next
        node.next.prev = node.prev
        # put node to the last
        node.next = self.tail
        node.prev = self.tail.prev
        node.prev.next = node
        self.tail.prev = node
        
        return node.val

    """
    @param: key: An integer
    @param: value: An integer
    @return: nothing
    """
    def set(self, key, value):
        # write your code here
        if key in self.hash:
            self.hash[key].val = value # update the value of that node
            node = self.hash[key]
            # delete node
            node.prev.next = node.next
            node.next.prev = node.prev
        else:
            if len(self.hash) == self.capacity:
                cur_node = self.head.next
                self.head.next = cur_node.next
                cur_node.next.prev = self.head
                del self.hash[cur_node.key]
            
            node = Node(key, value)
            self.hash[key] = node
            
              
        # put node to the last
        node.next = self.tail
        node.prev = self.tail.prev
        node.prev.next = node
        self.tail.prev = node
