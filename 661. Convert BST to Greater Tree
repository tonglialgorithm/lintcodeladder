661. Convert BST to Greater Tree
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of 
the original BST is changed to the original key plus sum of all keys greater than the 
original key in BST.

Example
Given a binary search Tree `{5,2,13}｀:

              5
            /   \
           2     13
Return the root of new tree

             18
            /   \
          20     13


按照右根左的顺序逐一相加
实质是后序遍历
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of binary tree
    @return: the new root
    """
    def convertBST(self, root):
        # write your code here
        self.total = 0
        self.helper(root)
        return root
    
    def helper(self, root):
        if not root:
            return
        #if root.right:
        self.helper(root.right)
        
        self.total += root.val
        root.val = self.total
        #if root.left:
        self.helper(root.left)
