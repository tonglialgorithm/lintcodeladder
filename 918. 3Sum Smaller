918. 3Sum Smaller
Given an array of n integers nums and a target, find the number of index triplets i, j, k 
with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example
Given nums = [-2,0,1,3], target = 2, return 2.

Explanation:
Because there are two triplets which sums are less than 2:
[-2, 0, 1]
[-2, 0, 3]
Challenge
Could you solve it in O(n2) runtime?


题目要求不查重（如果查重反而错了）

class Solution:
    """
    @param nums:  an array of n integers
    @param target: a target
    @return: the number of index triplets satisfy the condition nums[i] + nums[j] + nums[k] < target
    """
    def threeSumSmaller(self, nums, target):
        # Write your code here
        if nums is None or len(nums) < 3:
            return 0
        
        nums.sort()
        self.count = 0
        for i in range(len(nums) - 2):
            #if i > 0 and nums[i] == nums[i - 1]:
            #    continue
            left, right = i + 1, len(nums) - 1
            newTar = target - nums[i]
            self.twoSumSmaller(nums, left, right, newTar)
        return self.count
    
    def twoSumSmaller(self, nums, left, right, target):
        while left < right:
            if nums[left] + nums[right] < target:
                self.count += right - left
                left += 1
            else:
                right -= 1
