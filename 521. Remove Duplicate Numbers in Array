521. Remove Duplicate Numbers in Array

这个问题有两种做法，第一种做法比较容易想到的是，把所有的数扔到 hash 表里，然后就能找到不同的整数有哪些。但是这种做法
会耗费额外空间 O(n)O(n)。面试官会追问，如何不耗费额外空间。

此时我们需要用到双指针算法，首先将数组排序，这样那些重复的整数就会被挤在一起。然后用两根指针，一根指针走得快一些遍历
整个数组，另外一根指针，一直指向当前不重复部分的最后一个数。快指针发现一个和慢指针指向的数不同的数之后，就可以把这个
数丢到慢指针的后面一个位置，并把慢指针++。

用hash做：
O(n) time, O(n) space

class Solution:
    """
    @param: nums: an array of integers
    @return: the number of unique integers
    """
    def deduplication(self, nums):
        # write your code here
        d = {}
        res = 0
        for num in nums:
            if num not in d:
                d[num] = 1
                nums[res] = num    #把非重的元素以及第一次出现的重复元素提前
                res += 1
        
        return res


用双指针做：
O(nlogn) time, O(1) extra space

class Solution:
    """
    @param: nums: an array of integers
    @return: the number of unique integers
    """
    def deduplication(self, nums):
        # write your code here
        if len(nums) == 0:
            return 0
        
        nums.sort()
        res = 1
        for i in range(1, len(nums)):
            if nums[i - 1] != nums[i]:
                nums[res] = nums[i]
                res += 1
        return res

注意在这两种解法中，res既记录了unique元素的个数，同时又维护了调换后的数组内unique元素的index
在第二个解法中，res其实就是慢指针
