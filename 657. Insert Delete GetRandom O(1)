657. Insert Delete GetRandom O(1)

Design a data structure that supports all following operations in average O(1) time.
insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.

import random
class RandomizedSet:
    
    def __init__(self):
        # do intialization if necessary
        self.nums = []
        self.pos_map = {}

    """
    @param: val: a value to the set
    @return: true if the set did not already contain the specified element or false
    """
    def insert(self, val):
        # write your code here
        if val in self.pos_map:
            return False
        self.pos_map[val] = len(self.nums)
        self.nums.append(val)
        return True
        

    """
    @param: val: a value from the set
    @return: true if the set contained the specified element or false
    """
    def remove(self, val):
        # write your code here
        if val not in self.pos_map:
            return False
        idx, last = self.pos_map[val], self.nums[-1]
        self.nums[idx], self.pos_map[last] = last, idx
        self.nums.pop()
        self.pos_map.pop(val, None)
        return True


    """
    @return: Get a random element from the set
    """
    def getRandom(self):
        # write your code here
        return self.nums[random.randint(0, len(self.nums) - 1)]


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param = obj.insert(val)
# param = obj.remove(val)
# param = obj.getRandom()
