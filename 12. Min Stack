12. Min Stack
Implement a stack with min() function, which will return the smallest number in the stack.

It should support push, pop and min operation all in O(1) cost.

Example
push(1)
pop()   // return 1
push(2)
push(3)
min()   // return 2
push(1)
min()   // return 1

class MinStack:
    
    def __init__(self):
        # do intialization if necessary
        self.stack = []

    """
    @param: number: An integer
    @return: nothing
    """
    def push(self, x):
        # write your code here
        curMin = self.min()
        if curMin is None or x < curMin:
            curMin = x
        self.stack.append((x, curMin))

    """
    @return: An integer
    """
    def pop(self):
        # write your code here
        item = self.stack.pop()
        return item[0]

    """
    @return: An integer
    """
    def min(self):
        # write your code here
        if self.stack is None or len(self.stack) == 0:
            return None
        return self.stack[-1][1]
