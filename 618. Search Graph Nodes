618. Search Graph Nodes

Given a undirected graph, a node and a target, return the nearest node to given node which value of it 
is target, return NULL if you can't find.

There is a mapping store the nodes' values in the given parameters.



"""
Definition for a undirected graph node
class UndirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: graph: a list of Undirected graph node
    @param: values: a hash mapping, <UndirectedGraphNode, (int)value>
    @param: node: an Undirected graph node
    @param: target: An integer
    @return: a node
    """
    def searchNode(self, graph, values, node, target):
        # write your code here
        if values[node] == target:
            return node
            
        import Queue
        q = Queue.Queue()
        q.put(node)
        visited = {gnode: 0 for gnode in graph}
        visited[node] = 1
        
        while not q.empty():
            cur = q.get()
            for n in cur.neighbors:
                if values[n] == target and visited[n] == 0:
                    return n
                q.put(n)
                visited[n] = 1
                
        return None
