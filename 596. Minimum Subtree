596. Minimum Subtree
Given a binary tree, find the subtree with minimum sum. Return the root of the subtree.

LintCode will print the subtree which root is your return node.
It is guaranteed that there is only one subtree with minimum sum and the given binary tree is not an empty tree.

Example
Given a binary tree:

     1
   /   \
 -5     2
 / \   /  \
0   2 -4  -5 
return the node 1.

分治法，后序遍历一下，每个子树的和=左+右+root本身


"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of binary tree
    @return: the root of the minimum subtree
    """
    
    def findSubtree(self, root):
        # write your code here
        import sys
        self.minsum = sys.maxint
        self.res = None
        self.helper(root)
        return self.res
    
    # helper function 分治，返回当前节点的cursum（需要这个值，以此计算之后的树的值）,并维护res中的node
    def helper(self, root):
        if not root:
            return 0
        leftsum = self.helper(root.left)
        rightsum = self.helper(root.right)
        cursum = leftsum + rightsum + root.val
        
        if cursum <= self.minsum:
            self.minsum = cursum
            self.res = root
        
        return cursum
            
