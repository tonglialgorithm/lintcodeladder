587. Two Sum - Unique pairs

先排序，且注意skip重复元素
排序的时间复杂度nlog(n)

有需要注意的问题：
class Solution:
    """
    @param nums: an array of integer
    @param target: An integer
    @return: An integer
    """
    def twoSum6(self, nums, target):
        # 先排序法
        if len(nums) < 2:
            return 0
            
        nums.sort()
        n = len(nums)
        left, right = 0, n - 1
        count = 0
        
        while left < right:
            if nums[left] + nums[right] < target:
                left += 1
            elif nums[left] + nums[right] > target:
                right -= 1
            elif nums[left] + nums[right] == target:
                count += 1
                while nums[left + 1] == nums[left] and left < len(nums) - 2: 注意对left的限制条件以防left+1溢出
                    left += 1
                while nums[right - 1] == nums[right] and right > 0: 注意对right的限制条件以防right-1溢出
                    right -= 1
                left += 1
                right -= 1
        
        return count



别人的另一种解法：
使用hashMap记录array中元素的使用情况，未使用为0，使用过的为1，不去重，不排序

    def twoSum6(self, nums, target):
        # write your code here
        if len(nums) <= 1:
            return 0
        used = {}
        num = 0
        for each in nums:
            if target - each in used and used[target - each] == 0:
                num += 1
                used[target - each] = 1
                used[each] = 1
            if each not in used:
                used[each] = 0
        return num
