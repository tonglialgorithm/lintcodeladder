515. Paint House
There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Example
Given costs = [[14,2,11],[11,14,5],[14,3,10]] return 10

house 0 is blue, house 1 is green, house 2 is blue, 2 + 5 + 3 = 10


class Solution:
    """
    @param costs: n x 3 cost matrix
    @return: An integer, the minimum cost to paint all houses
    """
    def minCost(self, costs):
        # write your code here
        n = len(costs)
        if n == 0:
            return 0
        
        f = [[0 for i in range(3)] for j in range(n + 1)] 
        
        f[0][0] = f[0][1] = f[0][2] = 0
        
        #import sys
        for i in range(1, n+1):
            # house i - 1 's color is j
            for j in range(3):
                f[i][j] = sys.maxint
                # house i - 2 's color is k
                for k in range(3):
                    if k == j:
                        continue
                    # else, update f[i][j]
                    f[i][j] = min(f[i][j], f[i - 1][k] + costs[i - 1][j])
        
        return min(f[n][0], min(f[n][1], f[n][2]))
