780. Remove Invalid Parentheses
Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Example
"()())()" -> ["()()()", "(())()"]
"(a)())()" -> ["(a)()()", "(a())()"]
")(" -> [""]

1.从左到右遍历String获得左括号和右括号的计数
2.从左到右遍历String，如果碰到左括号或右括号，就删除左括号或右括号，更新计数，然后把剩下的String放入DFS递归，注意当有连续的左括号或者右括号的时候，必须先删前面的
3.DFS退出的条件是左括号和有括号的计数均为0

class Solution:
    """
    @param s: The input string
    @return: Return all possible results
    """
    def removeInvalidParentheses(self, s):
        # Write your code here
        res = []
        result = self.getLeftRightCount(s)
        self.dfs(s, 0, result[0], result[1], res)
        return res
    
    def dfs(self, s, startInd, leftCount, rightCount, res):
        if leftCount ==0 and rightCount == 0 and self.isValid(s) == True:
            res.append(s)
            return
        
        for i in range(startInd, len(s)):
            if i > startInd and s[i] == s[i - 1]:
                continue
            if leftCount > 0 and s[i] == '(':
                self.dfs(s[:i] + s[i+1:], i, leftCount - 1, rightCount, res)
            if rightCount > 0 and s[i] == ')':
                self.dfs(s[:i] + s[i+1:], i, leftCount, rightCount - 1, res)
    
    def isValid(self, s):
        result = self.getLeftRightCount(s)
        return result[0] == 0 and result[1] == 0
        
    def getLeftRightCount(self, s):
        count = [0, 0]
        for ch in s:
            if ch == '(':
                count[0] += 1
            if ch == ')':
                if count[0] > 0:
                    count[0] -= 1
                else:
                    count[1] += 1
        return count
