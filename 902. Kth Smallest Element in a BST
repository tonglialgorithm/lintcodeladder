902. Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example
Given root = {1,#,2}, k = 2, return 2.

Challenge
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?


解法一：
直观的解法：变成inorder list 之后找到第K-1个元素
但是使用了额外的n个空间
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the given BST
    @param k: the given k
    @return: the kth smallest element in BST
    """
    def kthSmallest(self, root, k):
        # write your code here
        if not root:
            return None
        self.inorderlist = []
        self.inorder(root)
        return self.inorderlist[k - 1]
    
    def inorder(self, root):
        if not root:
            return
        self.inorder(root.left)
        self.inorderlist.append(root.val)
        self.inorder(root.right)
        
        return self.inorderlist

解法二：
一直左边递归到底，然后回传时开始count往上加，直到count==k，则用res保存当前root值
之后虽然递归的回传还在进行，但是由于res已经不动了所以无影响，对右边也一样
但是如果在左边没有第k个（左子树的值个数小于k），则在右边继续，count继续计数，直到找到第k个用res保存


class Solution:
    """
    @param root: the given BST
    @param k: the given k
    @return: the kth smallest element in BST
    """
    def kthSmallest(self, root, k):
        # write your code here
        self.res = None
        self.count = 0
        self.helper(root, k)
        return self.res
    
    def helper(self, root, k):
        if not root:
            return
        
        self.helper(root.left, k)  # 到底了之后，count次开始加
        self.count += 1
        if self.count == k:
            self.res = root.val
        
        self.helper(root.right, k)


老师的解法三：
如果需要频繁改动tree，这样是一个优化
用一个字典保存每一个节点左root的node个数

class Solution:
    """
    @param root: the given BST
    @param k: the given k
    @return: the kth smallest element in BST
    """
    def kthSmallest(self, root, k):
        # write your code here
        numOfChildren = {}
        self.countNodes(root, numOfChildren)
        return self.quickSelectOnTree(root, k, numOfChildren)
    
    def countNodes(self, root, numOfChildren):
        if not root:
            return 0
        left = self.countNodes(root.left, numOfChildren)
        right = self.countNodes(root.right, numOfChildren)
        numOfChildren[root] = left + right + 1
        return left + right + 1
    
    def quickSelectOnTree(self, root, k, numOfChildren):
        if not root:
            return None
            
        if not root.left:
            left = 0
        else:
            left = numOfChildren[root.left]
        
        if left >= k:
            return self.quickSelectOnTree(root.left, k, numOfChildren)
        if left + 1 == k:
            return root.val
        
        return self.quickSelectOnTree(root.right, k - left - 1, numOfChildren)
