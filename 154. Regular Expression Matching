154. Regular Expression Matching
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).


The function prototype should be:

bool isMatch(string s, string p)

Example
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

课上视频中的解法，分情况讨论
但是超时了
在leetcode同样超时 256 / 447 test cases passed.
class Solution:
    """
    @param s: A string 
    @param p: A string includes "." and "*"
    @return: A boolean
    """
    def isMatch(self, s, p):
        # write your code here
        if len(s) == 0:
            return self.checkEmpty(p)
        if len(p) == 0:
            return False
        
        c1 = s[0]
        d1 = p[0]
        d2 = '0'     # any init value except * will do
        
        if len(p) > 1:
            d2 = p[1]
        
        if d2 == '*':
            if self.compare(c1, d1):
                return self.isMatch(s[1:], p) or self.isMatch(s, p[2:])
            else:
                return self.isMatch(s, p[2:])
        else:
            if self.compare(c1, d1):
                return self.isMatch(s[1:], p[1:])
            else:
                return False
    
    def compare(self, c1, d1):
        return d1 == '.' or c1 == d1
    
    def checkEmpty(self, p):
        if len(p) % 2 != 0:
            return False
        for i in range(1, len(p), 2):
            if p[i] != '*':
                return False
        return True


------------------------------------------------------------------------------------------------
不超时的版本：


使用深度优先搜索 + 记忆化的版本。

用一个二维的 boolean 数组来当记忆化数组，记录 s 从 sIndex 开始的后缀 能够匹配上 p 从 pIndex 开始的后缀
可套用wildcard的模板

**与Wildcard的区别：

class Solution:
    """
    @param s: A string 
    @param p: A string includes "." and "*"
    @return: A boolean
    """
    def isMatch(self, s, p):
        # write your code here
        if p is None or s is None:
            return False
        
        n, m = len(s), len(p)
        memo = [[False for i in xrange(m + 1)] for j in xrange(n + 1)]
        visited = [[False for i in xrange(m + 1)] for j in xrange(n + 1)]
        
        return self.dfs(s, 0, p, 0, memo, visited)
    
    def dfs(self, s, sInd, p, pInd, memo, visited):
        if pInd == len(p):
            return sInd == len(s)
        
        // 与Wildcard的区别
        if sInd == len(s):
            return self.isEmpty(p, pInd)
        
        if visited[sInd][pInd]:
            return memo[sInd][pInd]
        
        sChar = s[sInd]
        pChar = p[pInd]
        match = False
        
        // 与Wildcard的区别
        ///  consider a* as a bundle
        if pInd + 1 < len(p) and p[pInd + 1]== '*':
            match = self.dfs(s, sInd, p, pInd + 2, memo, visited) or self.charMatch(sChar, pChar) and self.dfs(s, sInd + 1, p, pInd, memo, visited)
        else:
            match = self.charMatch(sChar, pChar) and self.dfs(s, sInd + 1, p, pInd + 1, memo, visited)
        
        visited[sInd][pInd] = True
        memo[sInd][pInd] = match
        return match
    
    def charMatch(self, sChar, pChar): 
        return sChar == pChar or pChar == '.'
    
    def isEmpty(self, p, pIndex):
        for i in range(pIndex, len(p), 2):
            if i + 1 >= len(p) or p[i + 1] != '*':
                return False
        return True
