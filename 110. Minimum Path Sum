110. Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to 
bottom right which minimizes the sum of all numbers along its path.

class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m, n = len(grid), len(grid[0])
        if m == 0 or n == 0:
            return 0
        
        f = [[0 for i in range(n)] for j in range(m)]
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    f[i][j] = grid[i][j]
                    continue
                f[i][j] = sys.maxint
                if i > 0:
                    f[i][j] = min(f[i][j], f[i - 1][j] + grid[i][j])
                if j > 0:
                    f[i][j] = min(f[i][j], f[i][j - 1] + grid[i][j])
        
        return f[m - 1][n - 1]
                
--------------------------------------------------------------------

可以空间优化：只需要保存两行f值：f[i][0...n-1], f[i-1][0...n-1]

用滚动数组 rolling array

class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m, n = len(grid), len(grid[0])
        if m == 0 or n == 0:
            return 0
        
        f = [[0 for i in range(n)] for j in range(2)]
        
        now = 0
        
        for i in range(m):
            # change now and old whenever i is changed
            # rolling
            old = now
            now = 1 - now  # 也可以直接swap new, old
            for j in range(n):
                if i == 0 and j == 0:
                    f[now][j] = grid[i][j]
                    continue
                f[now][j] = sys.maxint
                if i > 0:
                    f[now][j] = min(f[now][j], f[old][j] + grid[i][j])
                if j > 0:
                    f[now][j] = min(f[now][j], f[now][j - 1] + grid[i][j])
            
        return f[now][n - 1]
