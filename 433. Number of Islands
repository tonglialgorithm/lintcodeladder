Description
Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, 
we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.

Example
Given graph:

[
  [1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1],
  [0, 0, 0, 1, 1],
  [0, 0, 0, 0, 0],
  [0, 0, 0, 0, 1]
]
return 3.

题解：
BFS in matrix 棋盘式结构

数连通块

class Solution:
    """
    @param grid: a boolean 2D matrix
    @return: an integer
    """
    def numIslands(self, grid):
        # write your code here
        if len(grid) == 0:
            return 0
        
        row, col = len(grid), len(grid[0])
        res = 0
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1:
                    self.bfs(grid, i, j)
                    res += 1
        return res
    
    # bfs的作用是1 找到这个岛屿上的所有点（值为1的） 2. 将这些点上的值全部变为0
    # 最后该岛上的所有点，都要变成0，并进入queue中。queue再把这些点一个一个弹出来，对每一个点再找它们联通的该岛屿上的其他点，直到这个岛屿再也没有连通的为1的点
    def bfs(self, grid, i, j):
        check = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        queue = [(i, j)]
        grid[i][j] = 0
        while len(queue) > 0:
            x, y = queue.pop()
            for dx, dy in check:
                if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]) and grid[x + dx][y + dy] == 1:
                    grid[x + dx][y + dy] = 0
                    queue.append((x + dx, y + dy))
