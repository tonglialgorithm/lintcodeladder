178. Graph Valid Tree
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

bfs
class Solution:
    """
    @param n: An integer
    @param edges: a list of undirected edges
    @return: true if it's a valid tree, or false
    """
    def validTree(self, n, edges):
        # write your code here
        if len(edges) != n - 1:
            return False
        
        neighbors = {i: [] for i in range(n)}
        for x, y in edges:
            neighbors[x].append(y)
            neighbors[y].append(x)
        import Queue
        q = Queue.Queue()
        visited = {}
        
        q.put(0)
        
        while not q.empty():
            cur = q.get()
            visited[cur] = True
            for node in neighbors[cur]:
                if node not in visited:
                    visited[node] = True
                    q.put(node)
        
        return len(visited) == n  
